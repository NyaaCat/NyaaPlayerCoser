apply plugin: "java-library"
apply plugin: "maven-publish"

// Plugin config
ext.pluginNameUpper = "NyaaPlayerCoser"
ext.pluginNameLower = ext.pluginNameUpper.toLowerCase()
ext.majorVersion = 8
ext.minorVersion = 1
ext.minecraftVersion = "1.17"
sourceCompatibility = 16
targetCompatibility = 16

// Suppiled by Jenkins
ext.buildNumber = System.env.BUILD_NUMBER == null ? "x"                : "$System.env.BUILD_NUMBER"
ext.mavenDirectory = System.env.MAVEN_DIR == null ? "$projectDir/repo" : "$System.env.MAVEN_DIR"
ext.jdDirectory = System.env.JAVADOCS_DIR == null ? null               : "$System.env.JAVADOCS_DIR"

// Search for spigot nms jar file
String spigotNmsPath = ""
if (System.env.NMS_JAR != null) {
    // use NMS_JAR if it's explicitly specified
    spigotNmsPath = "$System.env.NMS_JAR"
    if (new File(spigotNmsPath).exists()) {
        logger.warn("NMS jar is set manually: ${spigotNmsPath}")
    } else {
        throw new GradleException("NMS jar not found: ${spigotNmsPath}")
    }
} else if (new File("${mavenDirectory}/spigot-${minecraftVersion}-latest.jar").exists()) {
    // ci environment
    spigotNmsPath = "${mavenDirectory}/spigot-${minecraftVersion}-latest.jar"
} else {
    // check local dir (dev environment)
    spigotNmsPath = "${projectDir}/../nms_binaries/spigot-${minecraftVersion}.jar"
    if (!(new File(spigotNmsPath).exists())) {
        // nms not found, download from nyaaci
        def f = new File(spigotNmsPath)
        println "Downloading spigot-${minecraftVersion}.jar"
        f.getParentFile().mkdirs()
        new URL("https://ci.nyaacat.com/maven/spigot-${minecraftVersion}-latest.jar").withInputStream{ i -> f.withOutputStream{ it << i }}
    }
}
println ("Found NMS jar: ${spigotNmsPath}")

// Version used for distribution. Different from maven repo
group = "cat.nyaa"
archivesBaseName = "${pluginNameUpper}-mc$minecraftVersion"
version = "$majorVersion.$minorVersion.$buildNumber".toString()

// Repositories and dependencies
repositories {
    //jcenter()
    mavenCentral()
    maven { name 'Spigot';      url 'https://hub.spigotmc.org/nexus/content/repositories/snapshots/' }
    maven { name 'Sonatype';    url 'https://oss.sonatype.org/content/groups/public' }
    maven { name 'NyaaCat';     url 'https://ci.nyaacat.com/maven/' }
    maven { name 'dmulloy-repo';url 'https://repo.dmulloy2.net/nexus/repository/public/' } // ProtocolLib
    maven { name 'aikar';     url 'https://repo.aikar.co/content/groups/aikar/' }
}

dependencies {
    compileOnly "org.spigotmc:spigot-api:$minecraftVersion-R0.1-SNAPSHOT"
    compileOnly files(spigotNmsPath)

    // other nyaa plugins
    if (gradle.hasProperty("useLocalDependencies") && gradle.useLocalDependencies) {
        compileOnly project(":NyaaCore")
        compileOnly project(":HamsterEcoHelper")
    } else {
        compileOnly('cat.nyaa:nyaacore:8.1-SNAPSHOT') { transitive = false }
        compileOnly('cat.nyaa:hamsterecohelper:8.1-SNAPSHOT')
    }

    // 3rd party plugins
    compileOnly ('com.comphenix.protocol:ProtocolLib:4.7.0') { transitive = false }
}

// source file modification (modify version string)
processResources {
    filesMatching("**/plugin.yml") {
        expand 'version': project.version
    }
}

// source file jar
task sourcesJar(type: Jar) {
    archiveClassifier.set("sources")
    from sourceSets.main.allSource
}

// javadoc generation options
javadoc {
    // javadoc output folder
    if (project.jdDirectory != null) destinationDir = file("${jdDirectory}/${pluginNameLower}-${version}")

    (options as StandardJavadocDocletOptions).with  {
        links 'https://docs.oracle.com/en/java/javase/16/docs/api/'
        links 'https://hub.spigotmc.org/javadocs/spigot/'
        links 'https://google.github.io/guava/releases/21.0/api/docs/'
        links 'https://ci.md-5.net/job/BungeeCord/ws/chat/target/apidocs/'

        locale 'en_US'
        encoding 'UTF-8'
        docEncoding 'UTF-8'
        addBooleanOption('keywords', true)
        addStringOption('Xdoclint:none', '-quiet')

        options.addBooleanOption('html5', true)

        windowTitle = "${pluginNameUpper} Javadoc"
        docTitle = "${pluginNameUpper} (mc$minecraftVersion-${project.version})"
    }
}

// javadoc jar
task javadocJar(type: Jar, dependsOn: javadoc) {
    archiveClassifier.set("javadoc")
    from javadoc.destinationDir
}

// compile options
compileJava {
    options.compilerArgs += ["-Xlint:deprecation"]
}

// maven publish
publishing {
    publications {
        mavenJava(MavenPublication) {
            group      project.group
            artifactId pluginNameLower
            version    "$majorVersion.$minorVersion-SNAPSHOT"

            from components.java
            artifact sourcesJar
            artifact javadocJar
        }
    }
    repositories {
        maven {
            url mavenDirectory
        }
    }
}


